{"version":3,"sources":["base/_font-face.scss","base/_general.scss","base/_reset.scss","base/_root.scss","abstracts/_functions.scss","abstracts/_breakpoints.scss","components/_header.scss","abstracts/_mixins.scss","components/_section.scss","components/_footer.scss"],"names":[],"mappings":"AAEA,WACE,oBAAA,CACA,iEAAA,CACA,eAAA,CACA,iBAAA,CACA,iBAAA,CAGF,WACE,oBAAA,CACA,iEAAA,CACA,eAAA,CACA,iBAAA,CACA,iBAAA,CCbF,KACE,oBAAA,CACA,eAAA,CACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,2BAAA,CAAA,4BAAA,CAAA,yBAAA,CAAA,qBAAA,CAGF,KACE,kBAAA,CAAA,iBAAA,CAAA,aAAA,CCRF,mBAGE,6BAAA,CAAA,qBAAA,CAOF,6BACE,cAAA,CAOF,8CAEE,QAAA,CAOF,oDACE,cAAA,CAGF,kBACE,aAAA,CAGF,wBACE,aAAA,CACA,SAAA,CACA,WAAA,CAOF,kBACE,eAAA,CAGF,uBACE,iBAAA,CAQF,EACE,6BAAA,CAEA,cAAA,CAOF,wCACE,0CAAA,CAMF,IACE,aAAA,CACA,cAAA,CAMF,6BAIE,YAAA,CAGF,KAKE,WAAA,CAMF,mBAEE,sBAAA,CAGF,KAKE,eAAA,CAIA,eAAA,CAMF,YACE,iBAAA,CAGF,cACE,mBAAA,CAMF,MACE,uCAAA,CAAA,+BAAA,CAOF,uCACE,mBAGE,2CAAA,CAAA,mCAAA,CACA,8CAAA,CAAA,sCAAA,CACA,4CAAA,CAAA,oCAAA,CACA,+BAAA,CAAA,CCjJJ,MCMM,mCAAA,CAAA,kCAAA,CAAA,kCAAA,CAAA,kCAAA,CAAA,kCAAA,CAAA,mCAAA,CAAA,mCAAA,CAAA,oCAAA,CAAA,oCAAA,CAAA,oCAAA,CAAA,qCAAA,CAAA,oCAAA,CAAA,oCAAA,CAAA,oCAAA,CAAA,oCAAA,CASE,cAAA,CAAA,kBAAA,CAAA,kBAAA,CAAA,kBAAA,CAAA,kBAAA,CAAA,kBAAA,CCNJ,2CFTJ,MCsBU,cAAA,CAAA,kBAAA,CAAA,cAAA,CAAA,kBAAA,CAAA,cAAA,CAAA,kBAAA,CAAA,CEtBV,QCDE,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBAAA,CDEA,eAAA,CACA,sCAAA,CAEA,WACE,cAAA,CACA,4BAAA,CERJ,SDDE,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBAAA,CCEA,8BAAA,CACA,uCAAA,CAEA,gBACE,mBAAA,CAGF,gBDXA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBAAA,CCWE,kBAAA,CAEA,mBACE,8BAAA,CAKF,wBACE,cAAA,CACA,iBAAA,CACA,YAAA,CACA,4BAAA,CCxBN,QFDE,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBAAA,CEEA,eAAA,CACA,yCAAA,CAEA,WACE,cAAA,CACA,2BAAA","file":"styles.min.css","sourcesContent":["/* SELF-HOSTING FONTS */\n\n@font-face {\n  font-family: 'Roboto';\n  src: url('../../assets/fonts/Roboto-Medium.woff2') format('woff2');\n  font-weight: 400;\n  font-style: normal;\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'Roboto';\n  src: url('../../assets/fonts/Roboto-Medium.woff2') format('woff2');\n  font-weight: 500;\n  font-style: normal;\n  font-display: swap;\n}\n","/* GENERAL RULES */\n\nbody {\n  font-family: 'Roboto';\n  font-weight: 400;\n  display: flex;\n  flex-direction: column;\n}\n\nmain {\n  flex: 1 1 auto;\n}\n","/* RESET STYLES */\n\n*,\n::before,\n::after {\n  box-sizing: border-box;\n}\n\n/**\n  Remove left padding from list tags (ul, ol)\n  that have a class attribute\n  */\n:where(ul, ol):where([class]) {\n  padding-left: 0;\n}\n\n/**\n  Remove margin from body and two other tags\n  that have a class attribute\n  */\nbody,\n:where(blockquote, figure):where([class]) {\n  margin: 0;\n}\n\n/**\n  Remove vertical margins from specific tags\n  that have a class attribute\n  */\n:where(h1, h2, h3, h4, h5, h6, p, ul, ol, dl):where([class]) {\n  margin-block: 0;\n}\n\n:where(dd[class]) {\n  margin-left: 0;\n}\n\n:where(fieldset[class]) {\n  margin-left: 0;\n  padding: 0;\n  border: none;\n}\n\n/**\n  Remove default marker from unordered list (ul)\n  that has a class attribute\n  */\n:where(ul[class]) {\n  list-style: none;\n}\n\n:where(address[class]) {\n  font-style: normal;\n}\n\n/**\n  Reset vertical margins for paragraph,\n  declare a local variable for bottom margin\n  to avoid conflicts with more complex selectors\n  */\np {\n  --paragraphMarginBottom: 24px;\n\n  margin-block: 0;\n}\n\n/**\n  Set bottom margin for paragraph without a class attribute\n  that is not the last among its neighboring elements\n  */\np:where(:not([class]):not(:last-child)) {\n  margin-bottom: var(--paragraphMarginBottom);\n}\n\n/**\n  Simplify working with images\n  */\nimg {\n  display: block;\n  max-width: 100%;\n}\n\n/**\n  Inherit font properties for input fields\n  */\ninput,\ntextarea,\nselect,\nbutton {\n  font: inherit;\n}\n\nhtml {\n  /**\n    Useful in most cases\n    (e.g., when you need to \"stick\" the footer to the bottom of the site)\n    */\n  height: 100%;\n}\n\n/**\n  Smooth scroll behavior\n  */\nhtml,\n:has(:target) {\n  scroll-behavior: smooth;\n}\n\nbody {\n  /**\n    Useful in most cases\n    (e.g., when you need to \"stick\" the footer to the bottom of the site)\n    */\n  min-height: 100%;\n  /**\n    Uniform line height\n    */\n  line-height: 1.5;\n}\n\n/**\n  Standardize the color for svg elements\n  */\nsvg *[fill] {\n  fill: currentColor;\n}\n\nsvg *[stroke] {\n  stroke: currentColor;\n}\n\n/**\n  Fix delay issue when changing color during interaction with svg elements\n  */\nsvg * {\n  transition-property: fill, stroke;\n}\n\n/**\n  Remove all animations and transitions for people\n  who prefer not to use them\n  */\n@media (prefers-reduced-motion: reduce) {\n  *,\n  ::before,\n  ::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n","/* HTML ROOT */\n\n@use '../abstracts' as *;\n\n:root {\n  @include rootOutput(); // Include root output function\n}\n","/* FUNCTIONS */\n\n@use 'colors' as c;\n@use 'breakpoints' as b;\n@use 'type' as t;\n\n@mixin rootOutput() {\n  // Loop through the map of colors palette\n  @each $color, $shades in c.$colors {\n    @each $shade, $value in $shades {\n      --clr-#{$color}-#{$shade}: #{$value};\n    }\n  }\n\n  // Loop through the type scale map\n  @each $screen-size, $font-sizes in t.$type-scale {\n    // For the small screen size, apply font sizes directly without a media query\n    @if $screen-size == small {\n      @each $size, $value in $font-sizes {\n        --fs-#{$size}: #{$value};\n      }\n\n      // For all other screen sizes, apply font sizes within a media query\n    } @else {\n      @include b.mq(xl) {\n        @each $size, $value in $font-sizes {\n          --fs-#{$size}: #{$value};\n        }\n      }\n    }\n  }\n}\n","/* BREAKPOINTS */\n\n$breakpoints: (\n  xl: 1200px,\n  lg: 1024px,\n  md: 768px,\n  sm: 640px\n);\n\n@mixin mq($key) {\n  $size: map-get($breakpoints, $key);\n\n  @if $size {\n    @media only screen and (max-width: $size) {\n      @content;\n    }\n  } @else {\n    @error \"#{$key} does not exist in the \\$breakpoints map\";\n  }\n}\n","/* HEADER */\n\n@use '../abstracts/' as *;\n\n.header {\n  @include flex-center;\n\n  max-height: 70px;\n  background-color: var(--clr-accent-400);\n\n  h2 {\n    font-size: 32px;\n    color: var(--clr-primary-100);\n  }\n}\n","/* MIXINS */\n\n@mixin flex-center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n@mixin abs-center {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  translate:\n    -50%,\n    -50%;\n}\n\n@mixin reset-link {\n  color: inherit;\n\n  &,\n  &:hover {\n    text-decoration: none;\n  }\n}\n\n@mixin reset-button {\n  padding: 0;\n  background-color: transparent;\n  border: none;\n}\n\n@mixin visually-hidden {\n  position: absolute !important;\n  width: 1px !important;\n  height: 1px !important;\n  margin: -1px !important;\n  border: 0 !important;\n  padding: 0 !important;\n  white-space: nowrap !important;\n  clip-path: inset(100%) !important;\n  clip: rect(0 0 0 0) !important;\n  overflow: hidden !important;\n}\n","/* SECTION */\n\n@use '../abstracts' as *;\n\n.section {\n  @include flex-center;\n\n  min-height: calc(100vh - 140px);\n  background-color: var(--clr-primary-200);\n\n  &__inner {\n    padding-inline: 50px;\n  }\n\n  &__title {\n    @include flex-center;\n    margin-bottom: 50px;\n\n    h1 {\n      color: var(--clr-secondary-500);\n    }\n  }\n\n  &__description {\n    p {\n      font-size: 20px;\n      text-align: center;\n      padding: 20px;\n      color: var(--clr-primary-500);\n    }\n  }\n}\n","/* FOOTER */\n\n@use '../abstracts' as *;\n\n.footer {\n  @include flex-center;\n\n  max-height: 70px;\n  background-color: var(--clr-secondary-500);\n\n  h2 {\n    font-size: 32px;\n    color: var(--clr-accent-400);\n  }\n}\n"]}